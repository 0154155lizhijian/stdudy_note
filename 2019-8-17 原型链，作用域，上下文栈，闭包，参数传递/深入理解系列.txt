原型链
1. 函数才会有prototype
2. 每一个对象在创建的时候都会与之关联另一个对象，称之为原型，每一个对象都会从原型来继承属性。
Person ——> Person.prototype
3. 对象都有__proto__ 

作用域
1. javascript采用的是词法作用域（静态作用域），在函数定义的时候就决定了。

上下文栈
1. 代码执行是一段一段执行的，而不是逐行执行。当执行一个函数的时候，会先执行上下文环境。

三个重要属性：
1. 变量对象(VO)
2. 作用域链 (Scope)
3. this

函数上下文
活动对象是在进入函数上下文时刻被创建的，它通过函数的 arguments 属性初始化。arguments 属性值是 Arguments 对象

在执行上下文的时候，执行顺序
1. 函数声明
2. 变量声明
3. 若函数声明和变量声明的名字相同，则变量声明不会对其发生改变

一个函数在执行时，
1. 压栈globalcontext
2. 保存作用域链到内部属性[[scope]]  globalcontext.VO
3. 压栈funtion checkScopecontext(2,3同时进行)
4. 创建作用域链
5. arguments创建活动对象，加入形参，函数变量声明
6. 活动对象压入checkscope作用域顶端
7. 执行函数，修改AO属性值

闭包
闭包 = 函数 + 函数能够自由访问的自由变量

参数传递
按值传递(深拷贝传递)
引用传递 传递给对象的引用，两者引用的是同一个对象（浅拷贝传递）
共享传递  在传递对象的时候，传递的是对象的副本（浅拷贝）

总结：参数如果是基本类型，则是安值传递，如果是引用类型则是按共享传递。


